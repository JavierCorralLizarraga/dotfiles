" Plugins
    call plug#begin('~/vimfiles/bundle')
        " Plug 'sirver/ultisnips'
            " let g:UltiSnipsExpandTrigger = '<>'
            " let g:UltiSnipsJumpForwardTrigger = '<'
            " let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
        " Plug 'lervag/vimtex'
            " let g:tex_flavor='latex'
            " let g:vimtex_view_method='zathura'
            " let g:vimtex_quickfix_mode=0
            " let g:vimtex_syntax_conceal={'math_bounds': 0}
            " let g:tex_conceal= 'am' 
            " 'amgs'
            " Plug 'KeitaNakamura/tex-conceal.vim'
            " set conceallevel=1
            " let g:tex_conceal='abdmg'
            " hi Conceal ctermbg=none
        Plug 'tpope/vim-surround'
        Plug 'tpope/vim-fugitive'
        " Plug 'sheerun/vim-polyglot'
        Plug 'easymotion/vim-easymotion'
        Plug 'godlygeek/tabular', {'for': 'markdown'}
        Plug 'mbbill/undotree'
        Plug 'junegunn/vim-peekaboo'
        Plug 'bronson/vim-visual-star-search'
        " Plug 'neoclide/coc.nvim', {'branch': 'release'}
        " Plug 'cormacrelf/vim-colors-github'
        Plug 'Yggdroot/indentLine'
        " Plug 'tmhedberg/SimpylFold'
        Plug 'frazrepo/vim-rainbow'
    " Markdown
        " Plug 'SidOfc/mkdx'
        " Plug 'vim-pandoc/vim-rmarkdown'
        Plug 'vim-pandoc/vim-pandoc-syntax'
            let g:pandoc#syntax#conceal#use = 0
            " let g:pandoc#syntax#conceal#blacklist = ["titleblock","image","block","subscript","superscript","strikeout","atx","codeblock_start","codeblock_delim","footnote", " definition" , " list" , " newline" , " dashes" , " ellipses" , " quotes" , " inlinecode" ]
        " Plug 'vim-pandoc/vim-pandoc'
        " Plug 'tpope/vim-markdown'
        " Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
        Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
        " Plug 'plasticboy/vim-markdown', {'for': 'markdown'}
    " colorschemess
        " Plug 'dracula/vim',{ 'as': 'dracula' }
        Plug 'Mofiqul/vscode.nvim'
            let g:vscode_style = "dark"
    call plug#end()

" init
    " colorscheme dracula
    colorscheme vscode
    highlight Normal guibg=black guifg=white
    set background=dark
    syntax on
    set confirm " Display a confirmation dialog when closing an unsaved file
    set mouse=a " mouse support
    set number relativenumber " current line=0 and radiates
    set cursorline " highlight current line
    set ruler " cursor position
    set title
    " no pienso escribir todo eso para previewear mis notas
    cnoremap md MarkdownPreview 
    " toma a :Q como :q un typo comun 
    cnoremap Q q 
    " typo similar al de arriba
    cnoremap W w 
    " resourcea el vimrx sin reiniciar vim
    cnoremap source source ~/init.nvim
    set ignorecase " ignore case when searching
    set incsearch " incremental search that shows partial matches
    set smartcase " Automatically switch search to case-sensitive when search query contains an uppercase letter
    set lazyredraw " Don’t update screen during macro and script execution
    set display+=lastline " Always try to show a paragraph’s last line
    set encoding=utf-8 "  Use an encoding that supports unicode
    " set linebreak "  Avoid wrapping a line in the middle of a word
    " set breakindent " wrapped lines are indented
    set laststatus=2 " Always display the status bar
    " set space=indent,eol,start " Allow backspacing over indention, line breaks and insertion start 
    " set backupdir=~/.cache/vim " Directory to store backup files
    set directory=.,$TEMP " Directory to store swap files
    set history=1000 " Increase the undo limit
    set wildmenu
    set wildmode=list:longest,full
    "
    set nocp

" cositas que no se que son realmente (investigacion plz)
    map <ScrollWheelDown> <C-E>
    map <ScrollWheelUp> <C-Y>
    nnoremap ww :w,!pandoc 
    set nuw=4
    " setlocal spell
    set spelllang=en_us
    inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u

    " explicacion de este pedo
        source $VIMRUNTIME/delmenu.vim
        source $VIMRUNTIME/menu.vim

    " Vim with all enhancements
        " source $VIMRUNTIME/vimrc_example.vim

    augroup pandoc_syntax
        au! BufNewFile,BufFilePre,BufRead *.md set filetype=markdown.pandoc
    augroup END

" archivo se cargue directamente como .rmd
    autocmd BufRead, BufNewFile .rmd set filetype=rmarkdown

" quita hightlights al refrescar la pantalla
    nnoremap <silent> <enter> <C-L>:nohls<C-L><enter>

" abre el archivo en la parte donde te quedaste 
    if has("autocmd")
      au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal! g'\"" | endif
    endif

" indentation
    set autoindent 
    set smarttab
    set tabstop
    set expandtab 
    set shiftwidth=4
    set softtabstop=4

" wrap only md files    
    " au BufRead,BufNewFile *.md setlocal wrap
    set nowrap

" alternativa para Tex
"     augroup WrapLineInTeXFile
"         autocmd!
"         autocmd FileType tex setlocal wrap
"     augroup END

" tabs with tabs instead of "<>" 
    vnoremap <tab> >
    vnoremap <S-tab> <

" keeping the cursor centered
    nnoremap n nzzzv
    nnoremap N Nzzzv
    nnoremap J mzJ`z

" move whole lines at a time (Primagean)
    vnoremap J :m '>+1<CR>gv=gv
    vnoremap K :m '<-2<CR>gv=gv
    nnoremap K :m .-2<CR>==
    nnoremap J :m .+1<CR>==
    " inoremap <C-j> <esc>:m .+1<CR>==
    " inoremap <C-k> <esc>:m .-2<CR>==

" undo break points at symbol
    inoremap , ,<c-g>u 
    inoremap . .<c-g>u 
    inoremap ! !<c-g>u 
    inoremap " "<c-g>u 
    inoremap ? ?<c-g>u 

" changing multiple instances of a word (comment in primagean video (must have vim remaps))
    nnoremap cn *``cgn
    nnoremap cN *``cgN

" working with tabs 
    nnoremap nt :tabnew<space>
    nnoremap tn :tabnext<CR>
    nnoremap tp :tabprev<CR>
    nnoremap tf :tabfirst<CR>
    nnoremap tl :tablast<CR>

" clipbpard
    noremap <Leader>y "*y
    noremap <Leader>p "*p
    noremap <Leader>Y "+y
    noremap <Leader>P "+p

"navegacion por guias 
    inoremap <space><space>  <Esc>/<Enter>c4l<esc><C-L>:nohls<C-L><enter>i<right>
    nnoremap <leader>vim :tabnew $MYVIMRC<CR>

" shift + arrow selection
    nnoremap <S-Up> v<Up>
    nnoremap <S-Down> v<Down>
    nnoremap <S-Left> v<Left>
    nnoremap <S-Right> v<Right>
    vnoremap <S-Up> <Up>
    vnoremap <S-Down> <Down>
    vnoremap <S-Left> <Left>
    vnoremap <S-Right> <Right>
    inoremap <S-Up> <Esc>v<Up>
    inoremap <S-Down> <Esc>v<Down>
    inoremap <S-Left> <Esc>v<Left>
    inoremap <S-Right> <Esc>v<Right> 
    nnoremap <S-Up> v<Up>
    nnoremap <S-Down> v<Down>
    nnoremap <S-Left> v<Left>
    nnoremap <S-Right> v<Right>
    vnoremap <S-Up> <Up>
    vnoremap <S-Down> <Down>
    vnoremap <S-Left> <Left>
    vnoremap <S-Right> <Right>
    inoremap <S-Up> <Esc>v<Up>
    inoremap <S-Down> <Esc>v<Down>
    inoremap <S-Left> <Esc>v<Left>
    inoremap <S-Right> <Esc>v<Right>

" Latex
    " Letras bonitas
        inoremap losreales \mathbb{R}
        inoremap losnaturales \math{N}
        inoremap EFE \mathcal{F}
        inoremap PP \mathbb{P}
            
    " Letras griegas
        inoremap ALFA \alpha 
        inoremap BETA \beta
        inoremap DELTA \delta
        inoremap TETA \theta 
        inoremap PI \Pi
        inoremap EPS \epsilon
        inoremap SIGMA \sigma
        inoremap OO \infty

    " simbolos
        inoremap neq \neq
        inoremap {{ \left\{<enter>\begin{array}{ll}<enter><tab><++>&<++>&<++>\\<enter><++>&<++>&<++><enter><space>\end{array}<enter>\right.
        "inoremap |^ \Uparrow (no jala)
        "inoremap |v \Downarrow (no jala)
        inoremap -> \rightarrow
        inoremap => \Rightarrow
        inoremap <- \lefarrow
        inoremap <-> \leftrightarrow
        inoremap <=> \Leftrightarrow
        inoremap >= \geq
        inoremap =< \leq
        inoremap <= \leq
        "inoremap _|_ \perp (no jala)
        "inoremap || \parallel (no jala)
        inoremap =~ \approx
        inoremap :. \therefore 
        inoremap /> \nearrow
        inoremap \> \searrow
        inoremap AA \forall
        inoremap EE \exists
        inoremap inde \in
        inoremap .... \cdots
        inoremap SS \int
        inoremap SUMA \sum
        inoremap +- \pm
        inoremap /_ \angle
        inoremap TAB &ensp;

    " estructuras
        inoremap FF \frac{<++>}{<++>}<++>
        inoremap RR \sqrt[<++>]{<++>}<++>
        inoremap ;_ _{<++>}<++>
        inoremap ;^ ^{<++>}<++>
        inoremap ^} \overbrace{<++>}{<++>}<++>
        inoremap _} \underbrace{<++>}{<++>}<++>
        inoremap TTT \text{ <++> }<++>
        inoremap ;; \
        inoremap ,, $$<left>
        inoremap DEF <span style="text-decoration:underline; color: aqua"> Def </span> <++> <br>&ensp;
        inoremap DEMO <span style="text-decoration:underline; color: lime"> Demo </span> <++> <br>&ensp;
        inoremap TEO <span style="text-decoration:underline; color: fuchsia"> Teo </span> <++> <br>&ensp;

" miscelaneos que luego acomodo (got into here by a command like " echo map '1' '2' >> ~/init.nvim ") 
    "intento de imap -- buscar el "\" e insertar al lado un n para significar que ese simbolo se niega
    inoremap -- <esc>/<leader><enter>i<right>n
